<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/style.css">
    <!-- <style>
        @import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap');
    </style> -->

    <script src="https://use.fontawesome.com/3a2eaf6206.js"></script>

    <title>BooksMart</title>
</head>

<body>
    <nav id="mainNavbar" class="navbar navbar-dark fixed-top">
        <div style="margin-left: 15px; margin-top: 5px;">
            <img src="/img/logoGlasses.svg" alt="" id="glassesSVG" class="mt-0 mb-2 ml-1" style="float: right;">
        </div>

        <div class="navbar-nav" style="display: flex; flex-direction: row;">


            <div class="dropdown nav-item nav-link" style="margin-right: 0px;">
                <i class="fa fa-bell" style="font-size: 33px; margin-right: 30px; color: rgb(208, 195, 2);"></i>
                <i class="fa fa-bell-o" style="font-size: 33px; margin-right: 30px;"></i>
                <div class="dropdown-content navbar notis">
                    <label data-mod-target="#mod-config">Notis</label>
                </div>
            </div>

            <div class="dropdown nav-item nav-link" style="margin-right: 0px;">
                <i class="fa fa-bookmark-o" style="font-size: 33px; margin-right: 30px;"></i>
                <div class="dropdown-content navbar">
                    <form action="/logout?_method=DELETE" method="POST">
                        <label for="logout">Cerrar sesión</label>
                        <button id="logout" type="submit" style="display: none;"></button>
                    </form>
                    <label data-mod-target="#mod-config">Configuración</label>
                </div>
            </div>
        </div>


    </nav>


    <section class="container-fluid px-5" style="padding-top: 2cm;">

        <!-- 'Delete' modal "definition" starts here-->

        <div class="mod" id="mod-delete">
            <div class="mod-header">
                <div class="title">¿Qué libro quieres eliminar?</div>
                <button data-close-button class="close-button">&times;</button>
            </div>
            <div class="mod-body" mod-body>
                <div>
                    <input data-search id="search-word" class="search" type="search"
                        placeholder="Ingresa título, autor o año" aria-label="Search">
                </div>

                <div search-elements id="search-elements" class="scrollable-content">

                    <table search-table id="search_table" class="table table-dark table-hover table-striped">
                        <tbody search-tbody id="search-tbody">
                            <!-- Confirmed books will be displayed here -->
                        </tbody>
                    </table>

                </div>

                <div style="margin-right: 5%; margin-top: 10px;">
                    <button id="submit-delete" type="click" class="btn btn-primary">Eliminar</button>
                </div>
            </div>
        </div>

        <!-- 'Edit' modal "definition" starts here-->
        <div class="mod" id="mod-edit">
            <div class="mod-header">
                <div class="title">¿Qué libro quieres editar?</div>
                <button data-close-button class="close-button">&times;</button>
            </div>
            <div class="mod-body" mod-body>
                <div>
                    <input data-search id="search-word" class="search" type="search"
                        placeholder="Ingresa título, autor o año" aria-label="Search">
                </div>

                <div search-elements id="search-elements" class="scrollable-content">

                    <table search-table id="search_table" class="table table-dark table-hover table-striped">
                        <tbody search-tbody id="search-tbody">
                            <!-- Confirmed books will be displayed here -->
                        </tbody>
                    </table>

                </div>

                <div edit-form>

                </div>

                <div button-div style="margin-right: 5%; margin-top: 10px;">
                    <button id="select-edit" type="click" class="btn btn-primary">Editar</button>
                </div>
            </div>
        </div>

        <!-- 'Config' modal "definition" starts here-->
        <div class="mod" id="mod-config">
            <div class="mod-header">
                <div class="title">Configuración</div>
                <button data-close-button class="close-button">&times;</button>
            </div>
            <div class="mod-body" mod-body>
                <div>
                  <button id="edit-name" type="click" class="btn btn-primary">Cambiar nombre</button>
                </div>
                <div>
                    <button id="edit-email" type="click" class="btn btn-primary">Cambiar correo</button>
                </div>
                <div>
                    <button id="edit-password" type="click" class="btn btn-primary">Cambiar contraseña</button>
                </div>
            </div>
        </div>

        <div id="overlay"></div>
        <!-- Modal "Definition" ends-->

        <!-- 'Loading' modal-->
        <div id="loading" class="loading">
            <div class="spinner-border text-light" role="status">
                <span class="sr-only"></span>
            </div>
        </div>

        <div class="row align-items-center">
            <!-- List of books you want -->
            <h2 class="text-white" style="padding-top: 1cm;">Agregar libro que quieres</h2>
            <div id="quiere_libros">
                <div id='newBook_q' class="input-group mb-3"> <!-- Added the Bootstrap input-group class -->
                    <span class="input-group-text text-white" style="background-color: #24242c">Título</span>
                    <input id="name" type="text" name="quiere_libros[${bookCounterQuiero}][nombre]"
                        placeholder="Nombre del libro" class="form-control text-white"
                        style="background-color: #24242c">
                    <span class="input-group-text text-white" style="background-color: #24242c">Autor</span>
                    <input id="autor" type="text" name="quiere_libros[${bookCounterQuiero}][autor]"
                        placeholder="Autor del libro" autocomplete="off" class="form-control text-white"
                        style="background-color: #24242c">
                    <span class="input-group-text text-white" style="background-color: #24242c">Fecha de
                        Publicación</span>
                    <input id="date" type="text" name="quiere_libros[${bookCounterQuiero}][fecha_publicacion]"
                        placeholder="Fecha de Publicación" autocomplete="off" class="form-control text-white"
                        style="background-color: #24242c">

                    <label for="inputTag" class="cam">
                        <i class="fa fa-2x fa-camera"></i>
                        <input id="inputTag" type="file" style="background-color: #24242c" />
                    </label>
                </div>

                <div id="c-b2">
                    <button confirm-button style="float: right;" type="button" class="confirm-button btn btn-primary"
                        data-type="quiere_libros" data-index="${bookCounterQuiero}">Confirmar</button>
                </div>
                <!-- This is where the dynamic input fields will be added after deleting everything inside the div-->
            </div>

            <!-- List of books you have -->
            <h2 class="text-white">Agregar libro que tienes</h2>
            <div id="tiene_libros">
                <div id="newBook_t" class="input-group mb-3"> <!-- Added the Bootstrap input-group class -->
                    <span class="input-group-text text-white" style="background-color: #24242c">Título</span>
                    <input type="text" name="tiene_libros[${bookCounterTengo}][nombre]" placeholder="Nombre del libro"
                        autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                    <span class="input-group-text text-white" style="background-color: #24242c">Autor</span>
                    <input type="text" name="tiene_libros[${bookCounterTengo}][autor]" placeholder="Autor del libro"
                        autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                    <span class="input-group-text text-white" style="background-color: #24242c">Fecha de
                        Publicación</span>
                    <input type="text" name="tiene_libros[${bookCounterTengo}][fecha_publicacion]"
                        placeholder="Fecha de Publicación" autocomplete="off" class="form-control text-white"
                        style="background-color: #24242c">

                    <label for="inputTag" class="cam">
                        <i class="fa fa-2x fa-camera"></i>
                        <input id="inputTag" type="file" style="background-color: #24242c" />
                    </label>
                </div>
                <div id="c-b">
                    <button confirm-button style="float: right;" type="button" class="confirm-button btn btn-primary"
                        data-type="tiene_libros" data-index="${bookCounterTengo}">Confirmar</button>
                </div>
                <!-- This is where the dynamic input fields will be added after deleting everything inside the div-->
            </div>

            <!-- Display confirmed books -->
            <div id="ghostDiv" class="ghost">
                <h2 id="ghostSubT" class="ghost-text">Libros por guardar</h2>

                <div class="table-container">
                    <div class="by-side">
                        <table id="confirmed-bt1" class="table table-dark table-hover table-striped">
                            <thead>
                                <tr>
                                    <th ghost-txt class="ghost-text">Libros que quieres</th>
                                </tr>
                            </thead>
                            <tbody id="confirmed-bt1-body">
                                <!-- Table rows will be added dynamically here -->
                            </tbody>
                        </table>
                    </div>
                    <div class="by-side">
                        <table id="confirmed-bt2" class="table table-dark table-hover table-striped">
                            <thead>
                                <tr>
                                    <th ghost-txt class="ghost-text">Libros que tienes</th>
                                </tr>
                            </thead>
                            <tbody id="confirmed-bt2-body">
                                <!-- Table rows will be added dynamically here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <div style="float: right;">
                    <button class="btn btn-primary" type="click" id="save_changes">Acomodar en estantes</button>
                </div>
            </div>
        </div>

        <!-- Aquí comienza el contenedor de los estantes-->
        <hr class="new">
        <h2 class="text-white" style="text-align: center; padding-top: 10px;">Estantes</h2>

        <div class="table-container">
            <div class="by-side">
                <table id="data-table-1" class="table table-dark table-hover table-striped">
                    <thead>
                        <tr>
                            <th scope="col" class="estante">Libros que quiero
                                <div class="dropdown">
                                    <i class="fa fa-bars"></i>
                                    <button class="dropbtn"></button>
                                    <div class="dropdown-content">
                                        <label for="editar-q" data-mod-target="#mod-edit" shelf="quiero">Editar
                                            libro</label>
                                        <label for="eliminar-q" data-mod-target="#mod-delete" shelf="quiero">Eliminar
                                            libro</label>
                                    </div>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="table-body">
                        <!-- Table rows will be added dynamically here -->
                    </tbody>
                </table>
            </div>

            <div class="by-side">
                <table id="data-table-2" class="table table-dark table-hover table-striped">
                    <thead>
                        <tr>
                            <th scope="col" class="estante">Libros que tengo
                                <div class="dropdown">
                                    <i class="fa fa-bars"></i>
                                    <button class="dropbtn"></button>
                                    <div class="dropdown-content">
                                        <label for="editar-q" data-mod-target="#mod-edit" shelf="tengo">Editar
                                            libro</label>
                                        <label for="eliminar-q" data-mod-target="#mod-delete" shelf="tengo">Eliminar
                                            libro</label>
                                    </div>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="table-body-2">
                        <!-- Table rows will be added dynamically here -->
                    </tbody>
                </table>
            </div>
        </div>
    </section>



    <script>
        let bookCounterQuiero = 0;
        let bookCounterTengo = 0;
        const confirmedBooksTengo = [];
        const confirmedBooksQuiero = [];

        //Obtenemos los libros registrados por el usuario
        const string_q = '<%- JSON.stringify(q_libros) %>';
        const quiere_libros = JSON.parse(string_q);

        const string_t = '<%- JSON.stringify(t_libros) %>';
        const tiene_libros = JSON.parse(string_t);

        //Obtenemos las notificaciones del usuario
        const string_n = '<%- JSON.stringify(notifications) %>';
        const notifications = JSON.parse(string_n);

        console.log(notifications)

        //To upload new books
        document.getElementById('save_changes').addEventListener('click', async () => {

            openLoading();

            try {
                const response = await fetch('/newBooks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ confirmedBooksTengo, confirmedBooksQuiero }),
                });
                window.location.href = '/library';

            } catch (error) {
                console.error('Error:', error);
            }
        });

        //To delete an existing book
        const submit_delete = document.getElementById('submit-delete');
        submit_delete.addEventListener('click', async () => {

            const mod_body = submit_delete.parentElement.parentElement

            const delete_shelf = []
            const books = mod_body.querySelectorAll("[search-book]")
            let books_checked = 0

            const shelf = mod_body.querySelector("[label_id]").getAttribute('delete')


            books.forEach(book => {
                const label = book.querySelector("[search-label]")
                const input = book.querySelector("input")

                if (input.checked) {
                    books_checked += 1
                    const book_id = book.getAttribute('id')

                    delete_shelf.push({ book_id })
                    input.checked = false;
                }
            })

            if (books_checked > 0) {
                openLoading();
                try {
                    const response = await fetch('/delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ shelf, delete_shelf }),
                    });
                    window.location.href = '/library';

                } catch (error) {
                    console.error('Error:', error);
                }
            }
        });

        // Event listeners for editing books
        const select_edit = document.getElementById('select-edit');
        select_edit.addEventListener('click', () => {
            const mod_body = select_edit.parentElement.parentElement
            const books = mod_body.querySelectorAll('[search-book]')
            const shelf = mod_body.querySelector("[label_id]").getAttribute('delete')

            mod_body.parentElement.querySelector('.title').textContent = 'Editar'

            books.forEach(book => {
                const label = book.querySelector("[search-label]")
                const input = book.querySelector("input")


                if (input.checked) {
                    const header = mod_body.querySelector('[data-search]')
                    const search = mod_body.querySelector('[search-elements]')
                    const button = mod_body.querySelector('[button-div]')

                    header.classList.add('hide')
                    search.classList.add('hide')
                    button.classList.add('hide')

                    const form = mod_body.querySelector('[edit-form]')

                    const arr = label.textContent.trim().split('-')
                    const title = arr[0].trim()
                    const autor = arr[1].split('(')[0].trim()
                    const year = arr[1].split('(')[1].split(')')[0].trim()

                    form.innerHTML = '';

                    const child = `
                            <div class="input-group mb-3" style="display:block">
                                <div>
                                    <label style="color:white;">Titulo</label>
                                    <input id="title" type="text" value="${title}" name="title" placeholder="Título del libro"
                                        autocomplete="off" class="form-control text-white" style="background-color: #525252">
                                </div>
                                <div>    
                                    <label style="color:white;">Autor</label>
                                    <input id="autor" type="text" value="${autor}" name="autor" placeholder="Autor del libro"
                                        autocomplete="off" class="form-control text-white" style="background-color: #525252">
                                </div>
                                <div>
                                    <label style="color:white;">Fecha de publicación</label>
                                    <input id="year" type="text" value="${year}" name="year"
                                        placeholder="Fecha de Publicación" autocomplete="off" class="form-control text-white"
                                        style="background-color: #525252">
                                </div>
                            </div>

                            <div style="margin-right: 5%; margin-top: 10px; display: inline-block;">
                                <button cancel-edit id="cancel-edit" type="click" class="btn btn-primary">Cancelar</button>
                            </div>

                            <div style="margin-top: 10px; float:right; display: inline-block;">
                                <button submit-edit id="submit-edit" type="click" class="btn btn-primary">Guardar</button>
                            </div>
                            `;
                    form.insertAdjacentHTML('beforeend', child)


                    mod_body.querySelector('[cancel-edit]').addEventListener('click', () => {
                        header.classList.remove('hide')
                        button.classList.remove('hide')
                        search.classList.remove('hide')
                        form.innerHTML = '';
                        mod_body.parentElement.querySelector('.title').textContent = '¿Qué libro quieres editar?'
                    })

                    mod_body.querySelector('[submit-edit]').addEventListener('click', async () => {

                        openLoading();

                        const input_title = form.querySelector('[name=title]').value
                        const input_autor = form.querySelector('[name=autor]').value
                        const input_year = form.querySelector('[name=year]').value
                        const book_id = book.getAttribute('id')


                        try {
                            const response = await fetch('/updateBook', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ input_title, input_autor, input_year, shelf, book_id }),
                            });
                            window.location.href = '/library';

                        } catch (error) {
                            console.error('Error:', error);
                        }
                    })
                }
            })
        })

        // Event listener for confirming books
        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('confirm-button')) {
                const type = event.target.getAttribute('data-type'); //checar lo del type porque puede que sea lo que ocupemos para hacer botones con la misma función pero para diferentes datos
                const index = event.target.getAttribute('data-index');
                const bookInputs = document.querySelectorAll(
                    `[name="${type}[${index}][nombre]"], [name="${type}[${index}][autor]"], [name="${type}[${index}][fecha_publicacion]"]`
                );

                const book = {};

                bookInputs.forEach(input => {
                    const key = input.getAttribute('name').split('[')[2].split(']')[0]; // Adjusted index
                    const value = input.value;
                    book[key] = value;
                });

                if (book.nombre != '' & book.autor != '' & book.fecha_publicacion != '') {

                    if (type === 'quiere_libros') {
                        bookCounterQuiero++;
                        confirmedBooksQuiero.push(book);

                        const quiereLibros = document.getElementById('quiere_libros');
                        const child = document.getElementById('newBook_q')
                        quiereLibros.removeChild(child)

                        const cb = document.getElementById('c-b2')
                        quiereLibros.removeChild(cb)

                        const newBook = `
                            <div id='newBook_q' class="input-group mb-3"> <!-- Added the Bootstrap input-group class -->
                                <span class="input-group-text text-white" style="background-color: #24242c">Título</span>
                                <input id="name" type="text" name="quiere_libros[${bookCounterQuiero}][nombre]" placeholder="Nombre del libro"
                                    autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                                <span class="input-group-text text-white" style="background-color: #24242c">Autor</span>
                                <input id="autor" type="text" name="quiere_libros[${bookCounterQuiero}][autor]" placeholder="Autor del libro"
                                    autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                                <span class="input-group-text text-white" style="background-color: #24242c">Fecha de
                                    Publicación</span>
                                <input id="date" type="text" name="quiere_libros[${bookCounterQuiero}][fecha_publicacion]"
                                    placeholder="Fecha de Publicación" autocomplete="off" class="form-control text-white"
                                    style="background-color: #24242c">

                                <label for="inputTag" class="cam">
                                    <i class="fa fa-2x fa-camera"></i>
                                    <input id="inputTag" type="file" style="background-color: #24242c" />
                                    <span id="imageName"></span>
                                </label>
                            </div>

                            <div id="c-b2">
                                <button confirm-button style="float: right;" type="button" class="confirm-button btn btn-primary"
                                    data-type="quiere_libros" data-index="${bookCounterQuiero}">Confirmar</button>
                            </div>
                            `;

                        quiereLibros.insertAdjacentHTML('beforeend', newBook);

                    } else if (type === 'tiene_libros') {
                        confirmedBooksTengo.push(book);
                        bookCounterTengo++;
                        const tieneLibros = document.getElementById('tiene_libros');
                        const child = document.getElementById('newBook_t')
                        tieneLibros.removeChild(child)

                        const cb = document.getElementById('c-b'); //confirm button
                        tieneLibros.removeChild(cb);

                        const newBook = `
                            <div id="newBook_t" class="input-group mb-3"> <!-- Added the Bootstrap input-group class -->
                                <span class="input-group-text text-white" style="background-color: #24242c">Título</span>
                                <input type="text" name="tiene_libros[${bookCounterTengo}][nombre]" placeholder="Nombre del libro"
                                    autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                                <span class="input-group-text text-white" style="background-color: #24242c">Autor</span>
                                <input type="text" name="tiene_libros[${bookCounterTengo}][autor]" placeholder="Autor del libro" autocomplete="off"
                                    class="form-control text-white" style="background-color: #24242c">
                                <span class="input-group-text text-white" style="background-color: #24242c">Fecha de
                                    Publicación</span>
                                <input type="text" name="tiene_libros[${bookCounterTengo}][fecha_publicacion]" placeholder="Fecha de Publicación"
                                    autocomplete="off" class="form-control text-white" style="background-color: #24242c">
                                
                                <label for="inputTag" class="cam">
                                    <i class="fa fa-2x fa-camera"></i>
                                    <input id="inputTag" type="file" style="background-color: #24242c" />
                                    <span id="imageName"></span>
                                </label> 
                            
                            </div>

                            <div id="c-b">
                                <button confirm-button style="float: right;" type="button" class="confirm-button btn btn-primary"
                                    data-type="tiene_libros" data-index="${bookCounterTengo}">Confirmar</button>
                            </div>
                            
                            `;

                        tieneLibros.insertAdjacentHTML('beforeend', newBook);
                    }

                    updateConfirmedBooksTable();
                    ghostAppear();
                }
            }
        });

        // Function to update the confirmed books table
        function updateConfirmedBooksTable() {
            const confirmedTableQ = document.getElementById('confirmed-bt1-body');
            const confirmedTableT = document.getElementById('confirmed-bt2-body');

            confirmedTableQ.innerHTML = '';
            confirmedTableT.innerHTML = '';

            showShelf(confirmedBooksQuiero, confirmedTableQ);
            showShelf(confirmedBooksTengo, confirmedTableT);
        }

        //---------------------------------------------
        //--------------- BIBLIOTECA ------------------
        //---------------------------------------------

        //Mostramos estantes
        function showShelf(shelf, table) {
            shelf.forEach(book => {
                const row = document.createElement('tr');
                const td = document.createElement('td');

                td.textContent = `${book.nombre.replace('^', "'")} - ${book.autor.replace('^', "'")} (${book.fecha_publicacion.replace('^', "'")})`;

                row.appendChild(td);
                table.appendChild(row);
            })
        }

        const tableBody = document.getElementById('table-body');
        const tableBody2 = document.getElementById('table-body-2');

        showShelf(quiere_libros, tableBody);
        showShelf(tiene_libros, tableBody2);


        //Here we start to declare functionality of modals
        const openModButton = document.querySelectorAll('[data-mod-target]')
        const closeModButton = document.querySelectorAll('[data-close-button]')
        const overlay = document.getElementById('overlay')

        //Modal open button
        openModButton.forEach(button => {
            button.addEventListener('click', (event) => {
                const mod = document.querySelector(button.dataset.modTarget)
                openmod(mod)

                const shelf = event.target.getAttribute('shelf');

                if (shelf == 'quiero') {
                    createSearchTable(quiere_libros, shelf, mod);
                } else {
                    createSearchTable(tiene_libros, shelf, mod);
                }

                const searchInput = mod.querySelector("[data-search]")

                searchInput.addEventListener("input", (e) => {

                    const books = mod.querySelectorAll("[search-book]")

                    books.forEach(book => {
                        const label = book.querySelector("[search-label]")
                        const visible = label.textContent.toLowerCase().includes(e.target.value.toLowerCase())
                        book.classList.toggle("hide", !visible)
                    })
                })
            })
        })

        closeModButton.forEach(button => {
            button.addEventListener('click', () => {
                const mod = button.closest('.mod')
                closemod(mod)

                const m = button.parentElement.parentElement

                if (m.querySelector('.title').textContent == 'Editar') {
                    const header = m.querySelector('[data-search]')
                    const search = m.querySelector('[search-elements]')
                    const b = m.querySelector('[button-div]')
                    const form = m.querySelector('[edit-form]')

                    header.classList.remove('hide')
                    b.classList.remove('hide')
                    search.classList.remove('hide')
                    form.innerHTML = '';
                    m.querySelector('.title').textContent = '¿Qué libro quieres editar?'
                }
            })
        })

        overlay.addEventListener('click', () => {
            const mods = document.querySelectorAll('.mod.active')
            mods.forEach(mod => {
                closemod(mod)

                if (mod.querySelector('.title').textContent == 'Editar') {
                    console.log("close")
                    const header = mod.querySelector('[data-search]')
                    const search = mod.querySelector('[search-elements]')
                    const b = mod.querySelector('[button-div]')
                    const form = mod.querySelector('[edit-form]')

                    header.classList.remove('hide')
                    b.classList.remove('hide')
                    search.classList.remove('hide')
                    form.innerHTML = '';
                    mod.querySelector('.title').textContent = '¿Qué libro quieres editar?'
                }
            })
        })

        function createSearchTable(books, shelf, mod) {

            //Para eliminar los libros que ya estén, antes de poner los nuevos
            const searchTable = mod.querySelector('[search-tbody]')
            searchTable.innerHTML = '';

            const mod_type = mod.getAttribute('id')

            if (shelf == 'quiero') {
                const label = '<label label_id delete="quiero" style="display:none;"></label>'
                searchTable.insertAdjacentHTML('beforeend', label);
            } else {
                const label = '<label label_id delete="tengo" style="display:none;"></label>'
                searchTable.insertAdjacentHTML('beforeend', label);
            }

            let i = 0;
            //Agregamos libros de nuestra búsqueda
            books.forEach(book => {
                const row = document.createElement('tr');

                if (mod_type == 'mod-delete') {
                    const child = `
                        <td search-book>
                            <div id="${book._id}">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault${i}"></input>
                                <label search-label class="form-check-label" for="flexCheckDefault${i}" style="min-width: 93%;">
                                    ${book.nombre.replace('^', "'")} - ${book.autor.replace('^', "'")} (${book.fecha_publicacion.replace('^', "'")})
                                </label>
                            </div>
                        </td>
                        `;

                    row.insertAdjacentHTML('beforeend', child);
                    searchTable.appendChild(row);
                } else {
                    const child = `
                        <td search-book>
                            <div id="${book._id}">
                                <label search-label class="container"> 
                                    ${book.nombre.replace('^', "'")} - ${book.autor.replace('^', "'")} (${book.fecha_publicacion.replace('^', "'")})
                                    <input type="radio" checked="checked" name="radio">
                                    <span class="checkmark"></span>
                                </label>
                            </div>
                        </td>
                        `;

                    row.insertAdjacentHTML('beforeend', child);
                    searchTable.appendChild(row);
                }

                i++;
            })
        }

        function openmod(mod) {
            if (mod == null) return
            mod.classList.add('active')
            overlay.classList.add('active')
        }

        function closemod(mod) {
            if (mod == null) return
            mod.classList.remove('active')
            overlay.classList.remove('active')
        }

        function ghostAppear() {
            ghostDiv.classList.add('active')
            ghostSubT.classList.add('active2')

            const txt = document.querySelectorAll('[ghost-txt]')
            txt.forEach(t => {
                t.classList.add('active');
            })
        }

        function openLoading() {
            loading.classList.add('active')
            overlay.classList.add('active')
        }

        function closeLoading() { //debemos de checarlo bien antes de usarlo
            loading.classList.remove('active')
            //overlay.classList.remove('active')
        }
    </script>

</body>

</html>